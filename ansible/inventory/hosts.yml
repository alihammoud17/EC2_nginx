# ansible/inventory/hosts.yml
all:
  vars:
    # Global variables
    ansible_user: ubuntu
    ansible_ssh_private_key_file: ~/.ssh/id_rsa
    ansible_python_interpreter: /usr/bin/python3
    host_key_checking: False
    
    # Project configuration
    project_name: myapp
    app_user: ubuntu
    
    # Environment-specific settings
    environment: "{{ env | default('dev') }}"
    
    # AWS Configuration
    aws_region: us-west-2
    
    # Database configuration (override in group_vars or host_vars)
    database_host: "{{ rds_endpoint }}"
    database_port: 5432
    database_name: appdb
    database_username: dbadmin
    database_password: "{{ vault_db_password }}"
    
    # S3 configuration
    s3_bucket_name: "{{ s3_bucket }}"
    
    # SSL configuration
    enable_ssl: false
    
    # Application configuration
    app_port: 3000
    max_upload_size: 100m
    
    # Monitoring configuration
    enable_monitoring: true
    enable_cloudwatch: true
    
    # Security configuration
    enable_firewall: true
    enable_fail2ban: true

  children:
    webservers:
      hosts:
        # These will be populated from Terraform outputs or manually configured
        web-1:
          ansible_host: "{{ web_instance_1_ip | default('10.0.1.10') }}"
          ansible_ssh_private_key_file: "{{ ssh_key_path | default('~/.ssh/id_rsa') }}"
          server_role: primary
          enable_cron_jobs: true
        
        web-2:
          ansible_host: "{{ web_instance_2_ip | default('10.0.1.11') }}"
          ansible_ssh_private_key_file: "{{ ssh_key_path | default('~/.ssh/id_rsa') }}"
          server_role: secondary
          enable_cron_jobs: false
      
      vars:
        # Web server specific variables
        nginx_worker_processes: auto
        nginx_worker_connections: 1024
        nginx_client_max_body_size: "{{ max_upload_size }}"
        
        # Application specific
        node_env: production
        log_level: info
        
        # PM2 configuration
        pm2_apps:
          - name: "{{ project_name }}"
            script: "{{ app_directory | default('/opt/' + project_name) }}/app.js"
            instances: max
            env:
              NODE_ENV: "{{ node_env }}"
              PORT: "{{ app_port }}"

    databases:
      hosts:
        # RDS instances don't need Ansible configuration
        # but we can keep metadata here for reference
        postgres-main:
          db_host: "{{ rds_endpoint | default('localhost') }}"
          db_port: 5432
          db_engine: postgres
          db_version: "15.4"
      vars:
        # Database specific settings
        backup_retention: 7
        maintenance_window: "sun:04:00-sun:05:00"

    loadbalancers:
      hosts:
        # ALB is managed by AWS, but we can track it here
        alb-main:
          lb_dns: "{{ load_balancer_dns | default('') }}"
          lb_type: application
      vars:
        # Load balancer specific configuration
        lb_algorithm: round_robin
        health_check_interval: 30
        health_check_path: "/health"
