# FILE: ansible/templates/health_check.sh.j2
#!/bin/bash
# Health check script for {{ app_name }}
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
APP_NAME="{{ app_name }}"
LOG_FILE="{{ log_directory }}/health.log"
APP_URL="http://localhost:{{ app_port }}/health"
DB_HOST="{{ db_host }}"
DB_NAME="{{ db_name }}"
DB_USERNAME="{{ db_username }}"
DB_PASSWORD="{{ db_password }}"
S3_BUCKET="{{ s3_bucket }}"
AWS_REGION="{{ aws_region }}"
HEALTH_CHECK_TIMEOUT=10
MAX_LOG_SIZE=10485760  # 10MB

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Initialize log file if it doesn't exist
touch "$LOG_FILE"

# Rotate log file if it gets too big
if [[ -f "$LOG_FILE" && $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null) -gt $MAX_LOG_SIZE ]]; then
    mv "$LOG_FILE" "$LOG_FILE.old"
    touch "$LOG_FILE"
fi

# Function to log with timestamp
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local colored_level
    
    case $level in
        "ERROR")   colored_level="${RED}ERROR${NC}" ;;
        "SUCCESS") colored_level="${GREEN}SUCCESS${NC}" ;;
        "WARNING") colored_level="${YELLOW}WARNING${NC}" ;;
        *)         colored_level="$level" ;;
    esac
    
    echo -e "$timestamp [$colored_level] $message" | tee -a "$LOG_FILE"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check application health endpoint
check_app_health() {
    log_message "INFO" "Checking application health endpoint..."
    
    if command_exists curl; then
        local response
        local http_code
        
        response=$(curl -f -s -w "%{http_code}" --max-time $HEALTH_CHECK_TIMEOUT "$APP_URL" 2>/dev/null || echo "000")
        http_code="${response: -3}"
        
        if [[ "$http_code" == "200" ]]; then
            log_message "SUCCESS" "Application health check: PASSED (HTTP $http_code)"
            return 0
        else
            log_message "ERROR" "Application health check: FAILED (HTTP $http_code)"
            return 1
        fi
    else
        log_message "WARNING" "curl not available, skipping application health check"
        return 1
    fi
}

# Check application process
check_app_process() {
    log_message "INFO" "Checking application process..."
    
    if systemctl is-active --quiet "$APP_NAME"; then
        log_message "SUCCESS" "Application service: RUNNING"
        return 0
    else
        log_message "ERROR" "Application service: NOT RUNNING"
        
        # Try to restart the service
        log_message "INFO" "Attempting to restart $APP_NAME service..."
        if systemctl restart "$APP_NAME" 2>/dev/null; then
            log_message "SUCCESS" "Service restart: SUCCESSFUL"
            sleep 5  # Wait for service to start
        else
            log_message "ERROR" "Service restart: FAILED"
        fi
        return 1
    fi
}

# Check database connectivity
check_database() {
    log_message "INFO" "Checking database connectivity..."
    
    if command_exists psql; then
        if PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
            log_message "SUCCESS" "Database connectivity: PASSED"
            return 0
        else
            log_message "ERROR" "Database connectivity: FAILED"
            return 1
        fi
    else
        log_message "WARNING" "PostgreSQL client not available, skipping database check"
        return 1
    fi
}

# Check S3 access
check_s3() {
    log_message "INFO" "Checking S3 connectivity..."
    
    if command_exists aws; then
        if aws s3 ls "s3://$S3_BUCKET" --region "$AWS_REGION" >/dev/null 2>&1; then
            log_message "SUCCESS" "S3 connectivity: PASSED"
            return 0
        else
            log_message "ERROR" "S3 connectivity: FAILED"
            return 1
        fi
    else
        log_message "WARNING" "AWS CLI not available, skipping S3 check"
        return 1
    fi
}

# Check disk space
check_disk_space() {
    log_message "INFO" "Checking disk space..."
    
    local disk_usage
    disk_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [[ $disk_usage -lt 85 ]]; then
        log_message "SUCCESS" "Disk space check: PASSED (${disk_usage}% used)"
        return 0
    elif [[ $disk_usage -lt 95 ]]; then
        log_message "WARNING" "Disk space check: WARNING (${disk_usage}% used)"
        return 1
    else
        log_message "ERROR" "Disk space check: CRITICAL (${disk_usage}% used)"
        return 1
    fi
}

# Check memory usage
check_memory() {
    log_message "INFO" "Checking memory usage..."
    
    local mem_usage
    mem_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    
    if [[ $mem_usage -lt 85 ]]; then
        log_message "SUCCESS" "Memory check: PASSED (${mem_usage}% used)"
        return 0
    elif [[ $mem_usage -lt 95 ]]; then
        log_message "WARNING" "Memory check: WARNING (${mem_usage}% used)"
        return 1
    else
        log_message "ERROR" "Memory check: CRITICAL (${mem_usage}% used)"
        return 1
    fi
}

# Main health check function
main() {
    log_message "INFO" "Starting comprehensive health check for $APP_NAME..."
    
    local exit_code=0
    local failed_checks=()
    
    # Run all health checks
    check_app_process || { failed_checks+=("Application Process"); exit_code=1; }
    check_app_health || { failed_checks+=("Application Health Endpoint"); exit_code=1; }
    check_database || { failed_checks+=("Database Connectivity"); exit_code=1; }
    check_s3 || { failed_checks+=("S3 Connectivity"); exit_code=1; }
    check_disk_space || { failed_checks+=("Disk Space"); exit_code=1; }
    check_memory || { failed_checks+=("Memory Usage"); exit_code=1; }
    
    # Summary
    if [[ $exit_code -eq 0 ]]; then
        log_message "SUCCESS" "All health checks: PASSED âœ“"
    else
        local failed_list=$(IFS=', '; echo "${failed_checks[*]}")
        log_message "ERROR" "Health checks FAILED: $failed_list"
    fi
    
    log_message "INFO" "Health check completed with exit code: $exit_code"
    exit $exit_code
}

# Handle script termination
trap 'log_message "ERROR" "Health check script interrupted"' INT TERM

# Run main function
main "$@"