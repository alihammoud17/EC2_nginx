# FILE: ansible/templates/init_db.sql.j2
-- Database initialization script for {{ app_name }}
-- Generated by Ansible on {{ ansible_date_time.iso8601 }}

-- Create extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

-- Create application schema
CREATE SCHEMA IF NOT EXISTS {{ app_name }};

-- Set default schema
SET search_path TO {{ app_name }}, public;

-- Create application user and grant privileges
DO $
BEGIN
   IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '{{ db_username }}') THEN
      CREATE ROLE {{ db_username }} LOGIN PASSWORD '{{ db_password }}';
   END IF;
END
$;

-- Grant basic privileges
GRANT CONNECT ON DATABASE {{ db_name }} TO {{ db_username }};
GRANT USAGE ON SCHEMA {{ app_name }} TO {{ db_username }};
GRANT USAGE ON SCHEMA public TO {{ db_username }};
GRANT CREATE ON SCHEMA {{ app_name }} TO {{ db_username }};

-- Create audit log function
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS TRIGGER AS $
BEGIN
    IF TG_OP = 'DELETE' THEN
        INSERT INTO {{ app_name }}.audit_log (table_name, operation, old_values, changed_by, changed_at)
        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), current_user, NOW());
        RETURN OLD;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO {{ app_name }}.audit_log (table_name, operation, old_values, new_values, changed_by, changed_at)
        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, NOW());
        RETURN NEW;
    ELSIF TG_OP = 'INSERT' THEN
        INSERT INTO {{ app_name }}.audit_log (table_name, operation, new_values, changed_by, changed_at)
        VALUES (TG_TABLE_NAME, TG_OP, row_to_json(NEW), current_user, NOW());
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$ LANGUAGE plpgsql;

-- Create audit log table
CREATE TABLE IF NOT EXISTS {{ app_name }}.audit_log (
    id SERIAL PRIMARY KEY,
    table_name TEXT NOT NULL,
    operation TEXT NOT NULL,
    old_values JSONB,
    new_values JSONB,
    changed_by TEXT DEFAULT current_user,
    changed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create users table
CREATE TABLE IF NOT EXISTS {{ app_name }}.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(100) UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    is_active BOOLEAN DEFAULT true,
    is_verified BOOLEAN DEFAULT false,
    last_login TIMESTAMP WITH TIME ZONE,
    failed_login_attempts INTEGER DEFAULT 0,
    locked_until TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create user profiles table
CREATE TABLE IF NOT EXISTS {{ app_name }}.user_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES {{ app_name }}.users(id) ON DELETE CASCADE,
    avatar_url TEXT,
    bio TEXT,
    phone VARCHAR(20),
    address JSONB,
    preferences JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create sessions table
CREATE TABLE IF NOT EXISTS {{ app_name }}.user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES {{ app_name }}.users(id) ON DELETE CASCADE,
    session_token VARCHAR(255) UNIQUE NOT NULL,
    ip_address INET,
    user_agent TEXT,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create files table for S3 integration
CREATE TABLE IF NOT EXISTS {{ app_name }}.files (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES {{ app_name }}.users(id),
    filename VARCHAR(255) NOT NULL,
    original_filename VARCHAR(255) NOT NULL,
    s3_key VARCHAR(500) NOT NULL,
    s3_bucket VARCHAR(100) NOT NULL DEFAULT '{{ s3_bucket }}',
    content_type VARCHAR(100),
    file_size BIGINT,
    checksum VARCHAR(64),
    is_public BOOLEAN DEFAULT false,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create application settings table
CREATE TABLE IF NOT EXISTS {{ app_name }}.app_settings (
    id SERIAL PRIMARY KEY,
    key VARCHAR(100) UNIQUE NOT NULL,
    value JSONB,
    description TEXT,
    is_public BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create notifications table
CREATE TABLE IF NOT EXISTS {{ app_name }}.notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES {{ app_name }}.users(id) ON DELETE CASCADE,
    type VARCHAR(50) NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT,
    data JSONB,
    is_read BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create API keys table
CREATE TABLE IF NOT EXISTS {{ app_name }}.api_keys (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES {{ app_name }}.users(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    key_hash VARCHAR(255) NOT NULL,
    permissions JSONB DEFAULT '[]',
    last_used_at TIMESTAMP WITH TIME ZONE,
    expires_at TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_email ON {{ app_name }}.users(email);
CREATE INDEX IF NOT EXISTS idx_users_username ON {{ app_name }}.users(username);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON {{ app_name }}.users(created_at);
CREATE INDEX IF NOT EXISTS idx_users_is_active ON {{ app_name }}.users(is_active) WHERE is_active = true;

CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON {{ app_name }}.user_profiles(user_id);

CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON {{ app_name }}.user_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON {{ app_name }}.user_sessions(session_token);
CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON {{ app_name }}.user_sessions(expires_at);

CREATE INDEX IF NOT EXISTS idx_files_user_id ON {{ app_name }}.files(user_id);
CREATE INDEX IF NOT EXISTS idx_files_s3_key ON {{ app_name }}.files(s3_key);
CREATE INDEX IF NOT EXISTS idx_files_created_at ON {{ app_name }}.files(created_at);
CREATE INDEX IF NOT EXISTS idx_files_content_type ON {{ app_name }}.files(content_type);

CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON {{ app_name }}.notifications(user_id);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read ON {{ app_name }}.notifications(is_read) WHERE is_read = false;
CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON {{ app_name }}.notifications(created_at);

CREATE INDEX IF NOT EXISTS idx_api_keys_user_id ON {{ app_name }}.api_keys(user_id);
CREATE INDEX IF NOT EXISTS idx_api_keys_hash ON {{ app_name }}.api_keys(key_hash);
CREATE INDEX IF NOT EXISTS idx_api_keys_active ON {{ app_name }}.api_keys(is_active) WHERE is_active = true;

CREATE INDEX IF NOT EXISTS idx_audit_log_table_name ON {{ app_name }}.audit_log(table_name);
CREATE INDEX IF NOT EXISTS idx_audit_log_changed_at ON {{ app_name }}.audit_log(changed_at);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$ LANGUAGE plpgsql;

-- Create triggers for updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON {{ app_name }}.users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON {{ app_name }}.user_profiles
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_files_updated_at BEFORE UPDATE ON {{ app_name }}.files
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_app_settings_updated_at BEFORE UPDATE ON {{ app_name }}.app_settings
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Grant table permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA {{ app_name }} TO {{ db_username }};
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA {{ app_name }} TO {{ db_username }};
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA {{ app_name }} TO {{ db_username }};

-- Insert default settings
INSERT INTO {{ app_name }}.app_settings (key, value, description, is_public) VALUES
    ('app_name', '"{{ app_name }}"', 'Application name', true),
    ('app_version', '"1.0.0"', 'Application version', true),
    ('maintenance_mode', 'false', 'Enable maintenance mode', false),
    ('max_file_size', '104857600', 'Maximum file upload size in bytes (100MB)', false),
    ('allowed_file_types', '["jpg","jpeg","png","pdf","doc","docx","txt","csv"]', 'Allowed file upload types', false)
ON CONFLICT (key) DO NOTHING;

-- Create a view for active users
CREATE OR REPLACE VIEW {{ app_name }}.active_users AS
SELECT 
    u.id,
    u.email,
    u.username,
    u.first_name,
    u.last_name,
    u.last_login,
    up.avatar_url,
    u.created_at
FROM {{ app_name }}.users u
LEFT JOIN {{ app_name }}.user_profiles up ON u.id = up.user_id
WHERE u.is_active = true AND u.is_verified = true;

-- Grant view permissions
GRANT SELECT ON {{ app_name }}.active_users TO {{ db_username }};

COMMIT;