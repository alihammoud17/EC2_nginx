---
# ansible/templates/s3_setup.sh.j2
#!/bin/bash
# S3 setup script for {{ app_name }}
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
S3_BUCKET="{{ s3_bucket }}"
AWS_REGION="{{ aws_region }}"
APP_NAME="{{ app_name }}"
LOG_FILE="{{ log_directory }}/s3_setup.log"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

log "${GREEN}Setting up S3 bucket structure for $APP_NAME...${NC}"

# Check if AWS CLI is available and configured
if ! command -v aws &> /dev/null; then
    log "${RED}ERROR: AWS CLI is not installed${NC}"
    exit 1
fi

# Test AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    log "${RED}ERROR: AWS credentials not configured properly${NC}"
    exit 1
fi

# Test bucket access
log "Testing S3 bucket access..."
if ! aws s3 ls "s3://$S3_BUCKET" --region "$AWS_REGION" &> /dev/null; then
    log "${RED}ERROR: Cannot access S3 bucket: $S3_BUCKET${NC}"
    exit 1
fi

# Create folder structure in S3
log "Creating S3 folder structure..."

folders=(
    "uploads/"
    "uploads/images/"
    "uploads/documents/"
    "uploads/temp/"
    "public/"
    "public/assets/"
    "public/images/"
    "backups/"
    "backups/database/"
    "backups/files/"
    "logs/"
    "logs/application/"
    "logs/access/"
    "exports/"
    "imports/"
)

for folder in "${folders[@]}"; do
    log "Creating folder: $folder"
    if aws s3api put-object \
        --bucket "$S3_BUCKET" \
        --key "$folder" \
        --region "$AWS_REGION" \
        --metadata "created-by=ansible,app=$APP_NAME,purpose=folder-structure" \
        >> "$LOG_FILE" 2>&1; then
        log "${GREEN}✓ Created: $folder${NC}"
    else
        log "${YELLOW}⚠ Warning: Failed to create $folder (may already exist)${NC}"
    fi
done

# Create a test file to verify write permissions
log "Testing write permissions..."
test_file="/tmp/s3_test_$(date +%s).txt"
echo "S3 setup test file created on $(date)" > "$test_file"

if aws s3 cp "$test_file" "s3://$S3_BUCKET/uploads/temp/test.txt" --region "$AWS_REGION" >> "$LOG_FILE" 2>&1; then
    log "${GREEN}✓ Write permissions: OK${NC}"
    
    # Clean up test file
    aws s3 rm "s3://$S3_BUCKET/uploads/temp/test.txt" --region "$AWS_REGION" >> "$LOG_FILE" 2>&1 || true
    rm -f "$test_file"
else
    log "${RED}ERROR: Write permissions test failed${NC}"
    rm -f "$test_file"
    exit 1
fi

# Set up lifecycle policy for temp files
log "Setting up lifecycle policy for temporary files..."
lifecycle_policy=$(cat << EOF
{
    "Rules": [
        {
            "ID": "TempFileCleanup",
            "Status": "Enabled",
            "Filter": {
                "Prefix": "uploads/temp/"
            },
            "Expiration": {
                "Days": 7
            }
        },
        {
            "ID": "LogFileCleanup",
            "Status": "Enabled",
            "Filter": {
                "Prefix": "logs/"
            },
            "Expiration": {
                "Days": 90
            }
        },
        {
            "ID": "BackupRetention",
            "Status": "Enabled",
            "Filter": {
                "Prefix": "backups/"
            },
            "Transitions": [
                {
                    "Days": 30,
                    "StorageClass": "STANDARD_IA"
                },
                {
                    "Days": 365,
                    "StorageClass": "GLACIER"
                }
            ]
        }
    ]
}
EOF
)

if echo "$lifecycle_policy" | aws s3api put-bucket-lifecycle-configuration \
    --bucket "$S3_BUCKET" \
    --lifecycle-configuration file:///dev/stdin \
    --region "$AWS_REGION" >> "$LOG_FILE" 2>&1; then
    log "${GREEN}✓ Lifecycle policy applied${NC}"
else
    log "${YELLOW}⚠ Warning: Failed to apply lifecycle policy${NC}"
fi

# Create CORS configuration for web uploads
log "Setting up CORS configuration..."
cors_policy=$(cat << EOF
{
    "CORSRules": [
        {
            "AllowedHeaders": ["*"],
            "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
            "AllowedOrigins": ["*"],
            "ExposeHeaders": ["ETag"],
            "MaxAgeSeconds": 3000
        }
    ]
}
EOF
)

if echo "$cors_policy" | aws s3api put-bucket-cors \
    --bucket "$S3_BUCKET" \
    --cors-configuration file:///dev/stdin \
    --region "$AWS_REGION" >> "$LOG_FILE" 2>&1; then
    log "${GREEN}✓ CORS configuration applied${NC}"
else
    log "${YELLOW}⚠ Warning: Failed to apply CORS configuration${NC}"
fi

# Create bucket notification configuration (optional)
# This would be used to trigger Lambda functions or SNS notifications
# Uncomment and modify as needed
# notification_config=$(cat << EOF
# {
#     "TopicConfigurations": [
#         {
#             "Id": "FileUploadNotification",
#             "TopicArn": "arn:aws:sns:$AWS_REGION:123456789012:file-upload-notifications",
#             "Events": ["s3:ObjectCreated:*"],
#             "Filter": {
#                 "Key": {
#                     "FilterRules": [
#                         {
#                             "Name": "prefix",
#                             "Value": "uploads/"
#                         }
#                     ]
#                 }
#             }
#         }
#     ]
# }
# EOF
# )

# Final verification
log "Performing final verification..."
if aws s3 ls "s3://$S3_BUCKET/uploads/" --region "$AWS_REGION" >> "$LOG_FILE" 2>&1; then
    log "${GREEN}✓ S3 bucket structure verified${NC}"
else
    log "${RED}ERROR: Final verification failed${NC}"
    exit 1
fi

# Display summary
log "${GREEN}================================${NC}"
log "${GREEN}S3 Setup completed successfully!${NC}"
log "${GREEN}================================${NC}"
log "Bucket: $S3_BUCKET"
log "Region: $AWS_REGION"
log "Folders created: ${#folders[@]}"
log "Log file: $LOG_FILE"

# Create a summary file
summary_file="{{ app_directory }}/s3_info.json"
cat > "$summary_file" << EOF
{
    "bucket_name": "$S3_BUCKET",
    "region": "$AWS_REGION",
    "setup_date": "$(date -Iseconds)",
    "folders_created": $(printf '%s\n' "${folders[@]}" | jq -R . | jq -s .),
    "lifecycle_policy": "enabled",
    "cors_policy": "enabled",
    "status": "ready"
}
EOF

log "S3 configuration summary saved to: $summary_file"